# {{ ansible_managed }} 
upstream web { server unix:/tmp/h.sock fail_timeout=0; }
upstream websocket { server unix:/tmp/h-websocket.sock fail_timeout=0; }

server {
    listen 80;
    server_name {{ openstax_hypothesis_role.server_name }};
    types_hash_max_size 2046;
{% if openstax_hypothesis_role.ssl_on %}
    return 301 https://{{ openstax_hypothesis_role.server_name }}$request_uri;
} 

server {
    listen 443 ssl;
    server_name {{ openstax_hypothesis_role.server_name | default('_') }};
    root {{ openstax_hypothesis_role.application_dir }};
    ssl_certificate /etc/ssl/certs/{{ openstax_hypothesis_role.ssl_cert_file_name }};
    ssl_certificate_key /etc/ssl/private/{{ openstax_hypothesis_role.s3_key_name }};
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers
        'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    client_max_body_size 4G;
    large_client_header_buffers 4 32k;
    keepalive_timeout 5;

{% endif %}
    location /ws {
        proxy_pass http://websocket;
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Server $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api {
        proxy_pass http://web;
        proxy_http_version 1.1;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Server $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Request-Start "t=${msec}";

    }
}
